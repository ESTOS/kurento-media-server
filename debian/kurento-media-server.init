#!/bin/dash

### BEGIN INIT INFO
# Provides:          kurento-media-serverd
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Kurento Media Server daemon
### END INIT INFO

if [ -r "/lib/lsb/init-functions" ]; then
  . /lib/lsb/init-functions
else
  echo "E: /lib/lsb/init-functions not found, package lsb-base needed"
  exit 1
fi

# Default settings
START_DAEMON="false"
DAEMON_ARGS=""
DAEMON_USER="kurento"
DAEMON_LOG_DIR="/var/log/kurento-media-server"

# Load user-configurable settings
[ -f /etc/default/kurento-media-server ] && . /etc/default/kurento-media-server

# Non-configurable settings
DAEMON_BIN="/usr/bin/kurento-media-server"
PID_FILE="/var/run/kurento-media-server.pid"

[ "$START_DAEMON" != "true" ] && {
    log_failure_msg "Startup is disabled; enable it in /etc/default/kurento-media-server"
    exit 1
}

[ ! -x "$DAEMON_BIN" ] && {
    log_failure_msg "File is not executable: $DAEMON_BIN"
    exit 1
}

# Only root can start Kurento
verify_user() {
    [ "$(id -u)" -eq 0 ] || {
        log_failure_msg "Only root can start or stop Kurento Media Server"
        exit 1
    }
}

start_kurento() {
    verify_user

    # Verify pid file directory exists
    if [ ! -e /var/run ]; then
        install -d -m755 /var/run || {
            log_failure_msg "Unable to access /var/run directory"
            exit 1
        }
    fi

    # Verify log directory exists
    [ ! -d "$DAEMON_LOG_DIR" ] && {
        log_warning_msg "Directory '$DAEMON_LOG_DIR' does not exist"
        install -d -o "$DAEMON_USER" -m 755 "$DAEMON_LOG_DIR" || {
            log_failure_msg "Cannot create directory: $DAEMON_LOG_DIR"
            exit 1
        }
        log_success_msg "Created directory: $DAEMON_LOG_DIR"
    }

    # Make sure $DAEMON_LOG_DIR belongs to $DAEMON_USER
    [ "$(stat -c '%U' "$DAEMON_LOG_DIR")" = "$DAEMON_USER" ] || {
        log_warning_msg "Directory '$DAEMON_LOG_DIR' is not owned by '$DAEMON_USER'"
        chown "$DAEMON_USER" "$DAEMON_LOG_DIR" || {
            log_failure_msg "Cannot change owner of '$DAEMON_LOG_DIR' to '$DAEMON_USER'"
            exit 1
        }
        log_success_msg "Changed owner of '$DAEMON_LOG_DIR' to '$DAEMON_USER'"
    }

    # If set (null accepted), configure Kernel core dump output pattern
    [ -n "${DAEMON_CORE_PATTERN:-}" ] && {
        echo "$DAEMON_CORE_PATTERN" | tee /proc/sys/kernel/core_pattern >/dev/null
    }

    # Update process' resource limits
    log_action_msg "Configure Kernel resource limits for Kurento Media Server"

    # Enable generation of Kernel core dumps / crash reports
    ulimit -c unlimited || {
        log_failure_msg "Cannot set limit: unlimited core dump size"
        exit 1
    }

    # If set and not null, configure per-process max open file descriptors
    [ -n "${DAEMON_MAX_FILES:-}" ] && {
        # Maximum limit value allowed by Ubuntu: 2^20 = 1048576
        MAXIMUM_LIMIT=1048576
        [ "$DAEMON_MAX_FILES" -gt "$MAXIMUM_LIMIT" ] && DAEMON_MAX_FILES="$MAXIMUM_LIMIT"

        ulimit -n "$DAEMON_MAX_FILES" || {
            log_failure_msg "Cannot set limit: $DAEMON_MAX_FILES max open file descriptors"
            exit 1
        }
    }

    # If set and not null, configure per-user max threads
    [ -n "${DAEMON_MAX_THREADS:-}" ] && {
        ulimit -Sp "$DAEMON_MAX_THREADS" || {
            log_failure_msg "Cannot set limit: $DAEMON_MAX_THREADS max threads"
            exit 1
        }
    }

    # Add new section in error log
    # Note: This is "echo" from Dash, not the GNU command:
    # escape sequences can be used directly, no need to enable them
    echo "\n\n$(date --utc --iso-8601=seconds) -- New execution" >>"$DAEMON_LOG_DIR/errors.log"

    /sbin/start-stop-daemon \
            --start \
            --pidfile "$PID_FILE" \
            --make-pidfile \
            --exec "$DAEMON_BIN" \
            --chuid "$DAEMON_USER" \
            --background \
            --no-close \
            -- $DAEMON_ARGS \
            2>>"$DAEMON_LOG_DIR/errors.log" || {
        log_warning_msg "Kurento Media Server already started"
        return
    }
}

stop_kurento() {
    verify_user

    /sbin/start-stop-daemon \
            --stop \
            --exec "$DAEMON_BIN" \
            --pidfile "$PID_FILE" || {
        log_failure_msg "Kurento Media Server not running"
    }

    [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
}

status() {
    log_action_begin_msg "Checking Kurento Media Server"

    status="$(pidofproc -p "$PID_FILE" "$DAEMON_BIN" >/dev/null 2>&1)"
    if [ "$status" -eq 0 ]; then
        read -r pid < "$PID_FILE"
        log_action_cont_msg "$DAEMON_BIN is running with pid $pid"
        log_action_end_msg 0
    elif [ "$status" -eq 1 ]; then
        log_action_cont_msg "$DAEMON_BIN is not running but the pid file exists"
        log_action_end_msg 1
    elif [ "$status" -eq 3 ]; then
        log_action_cont_msg "$DAEMON_BIN is not running"
        log_action_end_msg 3
    else
        log_action_cont_msg "Unable to determine $DAEMON_BIN status"
        log_action_end_msg 4
    fi
}

case "$1" in
  start)
    log_daemon_msg "Start Kurento Media Server"
    start_kurento
    log_end_msg $?;
    ;;

  stop)
    log_daemon_msg "Stop Kurento Media Server";
    stop_kurento
    log_end_msg $?;
    ;;

  restart)
    $0 stop
    $0 start
    ;;

  force-reload)
    $0 stop
    $0 start
    ;;

  status)
    status
    ;;

  *)
    echo "Usage: $0 {start|stop|restart|status}" >&2
    ;;
esac

exit 0
